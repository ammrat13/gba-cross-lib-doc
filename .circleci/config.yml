version: 2.1


# The machine we'll run on
# We use some npm tools, so we need node
executors:
  base_exec:
    resource_class: small
    docker:
      - image: cimg/node:current


# Commands for logically separate tasks
# We use commands over jobs since we don't have Docker layer caching
commands:

  # Setup steps
  # Checkout the code and startup docker
  setup:
    description: Setting up the environment
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
      - run:
          name: Login to docker
          command: |
            echo "${DOCKER_PASSWORD}" | \
            docker login --username ammrat13 --password-stdin

  # Build the image
  build:
    description: Build the Docker image
    steps:
      - run:
          name: Build the Docker image
          command: |
            docker build \
              --tag ammrat13/gba-toolchain:latest \
              --file docker/gba-toolchain/Dockerfile \
              .

  # Test the image
  # We need TAP-XUnit, so install it without root privileges
  # We don't have volumes, so we copied the tests in during the build
  test:
    description: Test the library
    steps:
      - run:
          name: Install TAP-XUnit
          command: |
            npm install --prefix=$HOME/ --global tap-xunit
      - run:
          name: Create testing container
          command: |
            docker run --detach --tty \
              --name gba-toolchain-test ammrat13/gba-toolchain \
              /bin/bash
      - run:
          name: Build tests
          command: |
            docker exec --tty --workdir=/gba-lib/tests/ \
              gba-toolchain-test \
              make PREFIX=/gba-lib/ HOST=x86_64-linux-gnu- TARGET=arm-none-eabi-
      - run:
          name: Run tests
          command: |
            mkdir -pv ~/test-results/check/
            docker exec --tty --workdir=/gba-lib/tests/ \
              gba-toolchain-test \
              ./tests.out \
            | tap-xunit | tee ~/test-results/check/check.xml
      - run:
          name: Destroy testing container
          command: |
            docker stop gba-toolchain-test
            docker rm gba-toolchain-test
      - store_test_results:
          path: ~/test-results/

  # Push the image
  deploy:
    description: Push the Docker image
    steps:
      - run:
          name: Push the Docker image
          command: |
            docker push ammrat13/gba-toolchain:latest


# The different jobs for different branches
# Again, we can't use Docker layer caching
jobs:

  # Job to build, test, and deploy
  # Specifically for master
  build_test_deploy:
    executor: base_exec
    steps:
      - setup
      - build
      - test
      - deploy

  # Job to only build and test
  # For branches not master
  build_test:
    executor: base_exec
    steps:
      - setup
      - build
      - test


# A workflow that specifies the actions we need to take
# Conditionally do different jobs depending on the branch
workflows:
  do_actions:
    jobs:

      # Deploy if on master
      - build_test_deploy:
          filters:
            branches:
              only: master

      # Otherwise, just build and test
      - build_test:
          filters:
            branches:
              ignore: master
