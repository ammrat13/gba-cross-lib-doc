/**
    lnkscript
    By: Ammar Ratnani

    A simple linker script for GBA games. Note that it doesn't handle
    constructors in C or C++.
*/

ENTRY(_start)
TARGET(elf32-littlearm)


/* Taken directly from GBATek */
MEMORY {
    ewram (rwx) : ORIGIN = 0x02000000, LENGTH =   0x40000
    iwram (rwx) : ORIGIN = 0x03000000, LENGTH =    0x8000
    crom  (rx)  : ORIGIN = 0x08000000, LENGTH = 0x6000000
}


SECTIONS {

    /* Align everything to a four-byte boundary since a word is four bytes */

    /* Make sure crt0.o goes first since it has the cartridge header */
    /* We put the bootstrapping code in a separate section only for
        organization - this can be put in another section as long as its at
        the start of the cartridge ROM */
    .text.bootstrap : ALIGN(0x4) { KEEP( *crt0.o(.text.bootstrap) ) } >crom


    /* Write every other file's text section and variants of it */
    .text : ALIGN(0x4) { *(.text*) } >crom

    /* Also include the "glue" code generated for interworking */
    .glue_7       : ALIGN(0x4) { *(.glue_7)       } >crom
    .glue_7t      : ALIGN(0x4) { *(.glue_7t)      } >crom
    .v4_bx        : ALIGN(0x4) { *(.v4_bx)        } >crom
    .vfp11_veneer : ALIGN(0x4) { *(.vfp11_veneer) } >crom


    /* Sections for constructors and destructors */
    /* These sections don't have anything referencing them, so we use KEEP to
        prevent them from being garbage collected by the linker */
    /* Also handle priority in the constructors and destructors */
    .init_array : ALIGN(0x4) {
        KEEP(*(SORT_BY_INIT_PRIORITY(.init_array.*)))
        KEEP(*(.init_array))
    } >crom
    .fini_array : ALIGN(0x4) {
        KEEP(*(SORT_BY_INIT_PRIORITY(.fini_array.*)))
        KEEP(*(.fini_array))
    } >crom

    /* Pass data about .init_array and .fini_array to our loader so it can call
        all the constructors and destructors */
    /* We use start and end instead of length because that's easier for C's
        typing to handle with the weird ways these symbols work */
    /* Note that the end is just past the last element of the array */
    __init_arr_stt = ADDR(.init_array);
    __init_arr_end = ADDR(.init_array) + SIZEOF(.init_array);
    __fini_arr_stt = ADDR(.fini_array);
    __fini_arr_end = ADDR(.fini_array) + SIZEOF(.fini_array);


    /* Read-only data stays in the ROM */
    .rodata : ALIGN(0x4) { *(.rodata) } >crom


    /* We will copy .data into IWRAM from the ROM */
    .data : ALIGN(0x4){ *(.data) } >iwram AT>crom

    /* The .bss section is also in IWRAM, but we don't need to put it in the
        ROM image since it's initially zeroed out */
    /* We also take the recommendation to put COMMON in .bss */
    .bss (NOLOAD) : ALIGN(0x4) { *(.bss) *(COMMON) } >iwram

    /* The .noinit section is just like .bss except it isn't zeroed */
    .noinit (NOLOAD) : ALIGN(0x4) { *(.noinit) } >iwram

    /* Again, define symbols to pass to our loader */
    __data_vma_stt = ADDR(.data);
    __data_vma_end = ADDR(.data) + SIZEOF(.data);
    __data_lma     = LOADADDR(.data);
    __bss_vma_stt = ADDR(.bss);
    __bss_vma_end = ADDR(.bss) + SIZEOF(.bss);


    /* We don't care about these sections */
    /DISCARD/ : {
        /* Debugging */
        *(.comment)
        *(.ARM.attributes)
        *(.debug_*)
        /* Not entirely sure why these are being generated */
        *(.iplt)
        *(.rel.iplt)
        *(.igot.plt)
    }
}
