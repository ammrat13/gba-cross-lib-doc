/**
    lnkscript
    By: Ammar Ratnani

    A simple linker script for GBA games. Everything is aligned to a four-byte
    boundary since a word is four bytes.
*/

ENTRY(_start)
TARGET(elf32-littlearm)


/* Taken directly from GBATek */
MEMORY {
    ewram (rwx) : ORIGIN = 0x02000000, LENGTH =   0x40000
    iwram (rwx) : ORIGIN = 0x03000000, LENGTH =    0x8000
    crom  (rx)  : ORIGIN = 0x08000000, LENGTH = 0x2000000
    sram  (rwx) : ORIGIN = 0x0E000000, LENGTH =   0x10000
}


SECTIONS {

    /* Make sure crt0.o goes first since it has the cartridge header */
    /* It's placed in `.text.bootstrap` instead of `.text` for organization */
    /* This section doesn't have any references, so `KEEP` it */
    .text.bootstrap : ALIGN(0x4) {
        KEEP( *crt0.o(.text.bootstrap) )
    } >crom
    /* Provide symbols for the location of `.text.bootstrap` */
    /* Currently unused */
    __text_bootstrap_stt = ADDR(.text.bootstrap);
    __text_bootstrap_end = ADDR(.text.bootstrap) + SIZEOF(.text.bootstrap);


    /* Write every other file's text section */
    /* Do `.text*` for `-ffunction-sections` */
    /* Also include the "glue" code generated for interworking */
    .text : ALIGN(0x4) {
        *(.text*)
        *(.glue_7)
        *(.glue_7t)
        *(.v4_bx)
        *(.vfp11_veneer)
    } >crom
    /* Provide symbols for the location of `.text` */
    /* Currently unused */
    __text_stt = ADDR(.text);
    __text_end = ADDR(.text) + SIZEOF(.text);


    /* Read-only data stays in the ROM */
    .rodata : ALIGN(0x4) {
        *(.rodata*)
    } >crom
    /* Provide symbols for the location of `.rodata` */
    /* Currently unused */
    __rodata_stt = ADDR(.rodata);
    __rodata_end = ADDR(.rodata) + SIZEOF(.rodata);

    /* Sections for constructors and destructors with priority */
    /* These sections don't have anything referencing them, so `KEEP` them */
    .init_array : ALIGN(0x4) {
        KEEP(*(SORT_BY_INIT_PRIORITY(.init_array.*)))
        KEEP(*(.init_array))
    } >crom
    .fini_array : ALIGN(0x4) {
        KEEP(*(SORT_BY_INIT_PRIORITY(.fini_array.*)))
        KEEP(*(.fini_array))
    } >crom
    /* Provide symbols for the location of `.init_array` and `.fini_array` */
    /* Used by the loader so it can call all the constructors and destructors */
    __init_arr_stt = ADDR(.init_array);
    __init_arr_end = ADDR(.init_array) + SIZEOF(.init_array);
    __fini_arr_stt = ADDR(.fini_array);
    __fini_arr_end = ADDR(.fini_array) + SIZEOF(.fini_array);


    /* We need to copy the `.data` section over to RAM */
    /* By default it goes in IWRAM */
    .iwram_data : ALIGN(0x4) {
        *(.data*)
    } >iwram AT>crom
    /* Provide symbols for the location of `.iwram_data` */
    /* The loader will copy the data over to IWRAM */
    __iwram_data_vma_stt = ADDR(.iwram_data);
    __iwram_data_vma_end = ADDR(.iwram_data) + SIZEOF(.iwram_data);
    __iwram_data_lma_stt = LOADADDR(.iwram_data);
    __iwram_data_lma_end = LOADADDR(.iwram_data) + SIZEOF(.iwram_data);

    /* Zero out the `.bss` section in RAM */
    /* We also take the recommendation to put COMMON in .bss */
    .iwram_bss (NOLOAD) : ALIGN(0x4) {
        *(.bss*)
        . = ALIGN(0x4);
        *(COMMON)
    } >iwram
    /* Provide symbols for the location of `.iwram_bss` */
    /* The loader will zero out this memory */
    __iwram_bss_vma_stt = ADDR(.iwram_bss);
    __iwram_bss_vma_end = ADDR(.iwram_bss) + SIZEOF(.iwram_bss);

    /* Don't need to initialize the `.noinit` section, but goes in RAM */
    .iwram_noinit (NOLOAD) : ALIGN(0x4) {
        *(*.noinit*)
    } >iwram
    /* Provide symbols for the location of `.iwram_noinit` */
    /* Currently unused */
    __iwram_noinit_vma_stt = ADDR(.iwram_noinit);
    __iwram_noinit_vma_end = ADDR(.iwram_noinit) + SIZEOF(.iwram_noinit);


    /* Provide symbols for the end of the used area of memory */
    /* Currently unused */
    __iwram_end = __iwram_noinit_vma_end;
    __crom_end  = __iwram_data_lma_end;


    /* We don't care about these sections */
    /DISCARD/ : {
        /* Debugging */
        *(.comment)
        *(.ARM.attributes)
        *(.debug_*)
        /* Not entirely sure why these are being generated */
        *(.iplt)
        *(.rel.iplt)
        *(.igot.plt)
    }
}
