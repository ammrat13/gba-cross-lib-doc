/**
    crt0.s
    By: Ammar Ratnani

    Basic starup routine for GBA games. Is responsible for the cartridge header,
    copying data from ROM into RAM, setting up the stack, then calling `main`.
    Note that there is no operating system to pass parameters or handle failure,
    so the declatation should be `void main(void)`. Also note that this file
    does not handle interrupts or set up the IRQ stack.
*/

    .text

/* The processor starts in ARM mode, so account for that */
    .arm

/* Entry point of the code
   Note that we immediately jump to later to make space for the header */
    .global _start
_start:

    /* ROM entry point */
    b       rom_entry_point


cartridge_header:

    /* Nintendo logo from devKit's `gbafix` */
    .byte   0x24, 0xff, 0xae, 0x51, 0x69, 0x9a, 0xa2, 0x21, 0x3d, 0x84, 0x82, 0x0a
    .byte   0x84, 0xe4, 0x09, 0xad, 0x11, 0x24, 0x8b, 0x98, 0xc0, 0x81, 0x7f, 0x21
    .byte   0xa3, 0x52, 0xbe, 0x19, 0x93, 0x09, 0xce, 0x20, 0x10, 0x46, 0x4a, 0x4a
    .byte   0xf8, 0x27, 0x31, 0xec, 0x58, 0xc7, 0xe8, 0x33, 0x82, 0xe3, 0xce, 0xbf
    .byte   0x85, 0xf4, 0xdf, 0x94, 0xce, 0x4b, 0x09, 0xc1, 0x94, 0x56, 0x8a, 0xc0
    .byte   0x13, 0x72, 0xa7, 0xfc, 0x9f, 0x84, 0x4d, 0x73, 0xa3, 0xca, 0x9a, 0x61
    .byte   0x58, 0x97, 0xa3, 0x27, 0xfc, 0x03, 0x98, 0x76, 0x23, 0x1d, 0xc7, 0x61
    .byte   0x03, 0x04, 0xae, 0x56, 0xbf, 0x38, 0x84, 0x00, 0x40, 0xa7, 0x0e, 0xfd
    .byte   0xff, 0x52, 0xfe, 0x03, 0x6f, 0x95, 0x30, 0xf1, 0x97, 0xfb, 0xc0, 0x85
    .byte   0x60, 0xd6, 0x80, 0x25, 0xa9, 0x63, 0xbe, 0x03, 0x01, 0x4e, 0x38, 0xe2
    .byte   0xf9, 0xa2, 0x34, 0xff, 0xbb, 0x3e, 0x03, 0x44, 0x78, 0x00, 0x90, 0xcb
    .byte   0x88, 0x11, 0x3a, 0x94, 0x65, 0xc0, 0x7c, 0x63, 0x87, 0xf0, 0x3c, 0xaf
    .byte   0xd6, 0x25, 0xe4, 0x8b, 0x38, 0x0a, 0xac, 0x72, 0x21, 0xd4, 0xf8, 0x07

    /* Game title */
    .ascii  "CS2110ROCKS"
    .fill   1

    /* Game code */
    .ascii  "BCSE"

    /* Maker code */
    .ascii  "00"

    /* Fixed value */
    .byte   0x96

    /* Main unit code */
    .byte   0x00

    /* Device type */
    .byte   0x00

    /* Reserved area */
    .fill   7

    /* Version number */
    .byte   0

    /* Complement check */
    .byte   0xf8

    /* Reserved area */
    .fill   2


/* The real entry point of the code */
rom_entry_point:

    /* Set the stack pointer to 0x3008000 - the end of IWRAM */
    /* We can do this in two instructions w/ ARM's shift feature */
    mov     sp, #0x3000000
    add     sp, #0x8000

    /* We started in ARM mode, so switch to THUMB */
    /* Remember that `pc` is usually current instruction plus 8 bytes */
    add     r0, pc, #0x1
    bx      r0
    .thumb

    /* Do the setup needed before calling main() */
    /* Defined in `crti.c` */
    bl      _init

    /* Call main */
    bl      main

    /* Do teardown, even though it's not strictly needec */
    /* Defined in `crtn.c` */
    bl      _fini

    /* Emulators don't handle shutdown very well, so just hard reset */
    swi     #0x26
